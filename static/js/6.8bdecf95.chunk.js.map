{"version":3,"sources":["components/NavBar/NavBar.js","components/Home/CoronaCasesTable.js"],"names":["connect","state","states","props","React","useState","isOpen","setisOpen","color","dark","expand","className","onClick","id","navbar","left","to","localStorage","setItem","right","style","marginRight","caret","map","data","key","lat","long","lon","console","log","dispatch","startfetchWeather","coronaCases","datatable","columns","label","field","sort","width","rows","striped","bordered","small","hover","entries","order"],"mappings":"2KAsFeA,iBANS,SAACC,GACvB,MAAO,CACLC,OAAQD,EAAMC,UAIHF,EApEf,SAAoBG,GAAQ,IAAD,EACGC,IAAMC,UAAS,GADlB,mBAClBC,EADkB,KACVC,EADU,KAgBzB,OACE,kBAAC,IAAD,CAAWC,MAAM,SAASC,MAAI,EAACC,OAAO,MACpC,kBAAC,IAAD,KACE,4BAAQC,UAAU,cAAlB,sBAEF,kBAAC,IAAD,CAAkBC,QAbC,WACrBL,GAAWD,MAaT,kBAAC,IAAD,CAAaO,GAAG,kBAAkBP,OAAQA,EAAQQ,QAAM,GACtD,kBAAC,IAAD,CAAcC,MAAI,GAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYC,GAAG,SAAf,SAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYA,GAAG,qBAAf,YAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYA,GAAG,UAAUJ,QAnBd,WACnBK,aAAaC,QAAQ,iBAAkB,WAkB/B,YAKJ,kBAAC,IAAD,CAAcC,OAAK,EAACC,MAAO,CAAEC,YAAa,KACxC,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAmBC,OAAK,EAACd,MAAM,UAA/B,YAGA,kBAAC,IAAD,CAAiBG,UAAU,oBACxBR,EAAMD,OAAOqB,KAAI,SAACC,GACjB,OACE,kBAAC,IAAD,CACEC,IAAKD,EAAKvB,MACVW,QAAS,kBA5CDc,EA4C0BF,EAAKE,IA5C1BC,EA4C+BH,EAAKI,IA3CnEC,QAAQC,IAAIJ,EAAKC,EAAM,aACvBxB,EAAM4B,SAASC,YAAkBN,EAAKC,IAFb,IAACD,EAAKC,IA8Cb,kBAAC,IAAD,CAAMX,GAAE,mBAAcQ,EAAKvB,QAAUuB,EAAKvB,qB,iCCnEhE,sDA8DeD,uBALS,SAACC,GACvB,MAAO,CACLgC,YAAahC,EAAMgC,eAGRjC,EAzDf,SAA0BG,GACxB,IAAM+B,EAAY,CAChBC,QAAS,CACP,CACEC,MAAO,QACPC,MAAO,QACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,YACPC,MAAO,YACPC,KAAM,OACNC,MAAO,KAET,CACEH,MAAO,SACPC,MAAO,SACPC,KAAM,OACNC,MAAO,KAET,CACEH,MAAO,YACPC,MAAO,YACPC,KAAM,OACNC,MAAO,KAET,CACEH,MAAO,SACPC,MAAO,SACPC,KAAM,OACNC,MAAO,MAGXC,KAAMrC,EAAM8B,aAGd,OACE,oCACE,kBAAC,IAAD,MACA,kBAAC,IAAD,CACEQ,SAAO,EACPC,UAAQ,EACRC,OAAK,EACLnB,KAAMU,EACNU,OAAK,EACLC,QAAS,GACTC,MAAO,CAAC,YAAa","file":"static/js/6.8bdecf95.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  MDBNavbar,\r\n  MDBNavbarBrand,\r\n  MDBNavbarNav,\r\n  MDBNavItem,\r\n  MDBNavLink,\r\n  MDBNavbarToggler,\r\n  MDBCollapse,\r\n  MDBDropdown,\r\n  MDBDropdownToggle,\r\n  MDBDropdownMenu,\r\n  MDBDropdownItem,\r\n} from \"mdbreact\";\r\nimport { connect } from \"react-redux\";\r\nimport { startfetchWeather } from \"../../action/weatherDataAction\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction NavbarPage(props) {\r\n  const [isOpen, setisOpen] = React.useState(false);\r\n\r\n  const handleWeatherFetch = (lat, long) => {\r\n    console.log(lat, long, \"data\");\r\n    props.dispatch(startfetchWeather(lat, long));\r\n  };\r\n\r\n  const toggleCollapse = () => {\r\n    setisOpen(!isOpen);\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.setItem(\"weatherapp_log\", \"false\");\r\n  };\r\n\r\n  return (\r\n    <MDBNavbar color=\"purple\" dark expand=\"md\">\r\n      <MDBNavbarBrand>\r\n        <strong className=\"white-text\">Weather & Corona </strong>\r\n      </MDBNavbarBrand>\r\n      <MDBNavbarToggler onClick={toggleCollapse} />\r\n      <MDBCollapse id=\"navbarCollapse3\" isOpen={isOpen} navbar>\r\n        <MDBNavbarNav left>\r\n          <MDBNavItem>\r\n            <MDBNavLink to=\"/home\">Home</MDBNavLink>\r\n          </MDBNavItem>\r\n          <MDBNavItem>\r\n            <MDBNavLink to=\"/weather/banglore\">Weather</MDBNavLink>\r\n          </MDBNavItem>\r\n          <MDBNavItem>\r\n            <MDBNavLink to=\"/signup\" onClick={handleLogout}>\r\n              Logout\r\n            </MDBNavLink>\r\n          </MDBNavItem>\r\n        </MDBNavbarNav>\r\n        <MDBNavbarNav right style={{ marginRight: 50 }}>\r\n          <MDBNavItem>\r\n            <MDBDropdown>\r\n              <MDBDropdownToggle caret color=\"yellow\">\r\n                Banglore\r\n              </MDBDropdownToggle>\r\n              <MDBDropdownMenu className=\"dropdown-default\">\r\n                {props.states.map((data) => {\r\n                  return (\r\n                    <MDBDropdownItem\r\n                      key={data.state}\r\n                      onClick={() => handleWeatherFetch(data.lat, data.lon)}\r\n                    >\r\n                      <Link to={`/weather/${data.state}`}>{data.state}</Link>\r\n                    </MDBDropdownItem>\r\n                  );\r\n                })}\r\n              </MDBDropdownMenu>\r\n            </MDBDropdown>\r\n          </MDBNavItem>\r\n        </MDBNavbarNav>\r\n      </MDBCollapse>\r\n    </MDBNavbar>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    states: state.states,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(NavbarPage);\r\n","import React from \"react\";\r\nimport NavbarPage from \"../NavBar/NavBar\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction CoronaCasesTable(props) {\r\n  const datatable = {\r\n    columns: [\r\n      {\r\n        label: \"State\",\r\n        field: \"State\",\r\n        sort: \"asc\",\r\n        width: 200,\r\n      },\r\n      {\r\n        label: \"Confirmed\",\r\n        field: \"Confirmed\",\r\n        sort: \"desc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Active\",\r\n        field: \"Active\",\r\n        sort: \"desc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Recovered\",\r\n        field: \"Recovered\",\r\n        sort: \"desc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Deaths\",\r\n        field: \"Deaths\",\r\n        sort: \"desc\",\r\n        width: 150,\r\n      },\r\n    ],\r\n    rows: props.coronaCases,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <NavbarPage />\r\n      <MDBDataTable\r\n        striped\r\n        bordered\r\n        small\r\n        data={datatable}\r\n        hover\r\n        entries={38}\r\n        order={[\"Confirmed\", \"asc\"]}\r\n      ></MDBDataTable>\r\n    </>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    coronaCases: state.coronaCases,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(CoronaCasesTable);\r\n"],"sourceRoot":""}