{"version":3,"sources":["action/weatherDataAction.js","action/getUsersGoogleSheets.js","action/saveUsersGoogleSheets.js","action/userAction.js","App.js","serviceWorker.js","reducers/usersReducer.js","reducers/coronaCasesReducer.js","reducers/weatherDataReducer.js","reducers/statesReducer.js","store/configStore.js","index.js"],"names":["startWeatherData","dispatch","axios","get","then","response","setWeather","data","catch","error","console","log","type","payload","startfetchWeather","lat","long","GoogleSpreadsheet","require","a","doc","useServiceAccountAuth","loadInfo","sheet","sheetsByIndex","getRows","rows","map","userData","id","name","Name","email","Email","password","fetchUsers","addRow","length","larryRow","saveUsers","startgetUsers","users","setUsers","startAddUsers","redirect","Home","lazy","Weather","SignUp","SignIn","App","fallback","className","role","component","path","exact","Boolean","window","location","hostname","match","initState","userReducer","state","action","coronaCasesReducer","configStore","createStore","combineReducers","usersReducer","coronaCases","weather","weatherDataReducer","states","statesReducer","applyMiddleware","thunk","store","subscribe","getState","jsx","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.76698ea1.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const startWeatherData = () => {\r\n  return (dispatch) => {\r\n    axios\r\n      .get(\r\n        \"https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/6a37a0becaf6f623b8d73d2b039541f7/12.9716,77.5946?exclude=minutely ,hourly,daily,alerts,flags\"\r\n      )\r\n      .then((response) => {\r\n        dispatch(setWeather(response.data));\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n};\r\n\r\nexport const setWeather = (data) => {\r\n  return {\r\n    type: \"SET_WEATHER\",\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const startfetchWeather = (lat, long) => {\r\n  return (dispatch) => {\r\n    axios\r\n      .get(\r\n        `https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/6a37a0becaf6f623b8d73d2b039541f7/${lat},${long}?exclude=minutely ,hourly,daily,alerts,flags`\r\n      )\r\n      .then((response) => {\r\n        dispatch(setWeather(response.data));\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n};\r\n","const { GoogleSpreadsheet } = require(\"google-spreadsheet\");\r\n\r\nasync function fetchUsers() {\r\n  const doc = new GoogleSpreadsheet(\r\n    \"1VuUA8MKKA8IJwCNi6QdsCRyVWcgn_ZS1uoz_f_sUBFM\"\r\n  );\r\n  await doc.useServiceAccountAuth(require(\"./keys.json\"));\r\n  await doc.loadInfo();\r\n  const sheet = doc.sheetsByIndex[0];\r\n  const rows = await sheet.getRows();\r\n  const data = rows.map((userData) => {\r\n    return {\r\n      id: userData.id,\r\n      name: userData.Name,\r\n      email: userData.Email,\r\n      password: userData.password,\r\n    };\r\n  });\r\n  return data;\r\n}\r\n\r\nexport default fetchUsers;\r\n","const { GoogleSpreadsheet } = require(\"google-spreadsheet\");\r\n\r\nasync function saveUsers(name, email, password) {\r\n  const doc = new GoogleSpreadsheet(\r\n    \"1VuUA8MKKA8IJwCNi6QdsCRyVWcgn_ZS1uoz_f_sUBFM\"\r\n  );\r\n  await doc.useServiceAccountAuth(require(\"./keys.json\"));\r\n  await doc.loadInfo();\r\n  const sheet = doc.sheetsByIndex[0];\r\n  const rows = await sheet.getRows();\r\n\r\n  const data = rows.map((userData) => {\r\n    return {\r\n      id: userData.id,\r\n      name: userData.Name,\r\n      email: userData.Email,\r\n      password: userData.password,\r\n    };\r\n  });\r\n  const larryRow = await sheet.addRow({\r\n    id: data.length + 1,\r\n    Name: name,\r\n    Email: email,\r\n    password: password,\r\n  });\r\n  console.log(larryRow);\r\n  return data;\r\n}\r\n\r\nexport default saveUsers;\r\n","import fetchUsers from \"./getUsersGoogleSheets\";\r\nimport saveUsers from \"./saveUsersGoogleSheets\";\r\n\r\nexport const startgetUsers = () => {\r\n  return (dispatch) => {\r\n    fetchUsers().then((users) => {\r\n      dispatch(setUsers(users));\r\n    });\r\n  };\r\n};\r\n\r\nexport const setUsers = (users) => {\r\n  return {\r\n    type: \"SET_USER\",\r\n    payload: users,\r\n  };\r\n};\r\n\r\nexport const pushUser = (user) => {\r\n  return {\r\n    type: \"PUSH_USER\",\r\n    payload: user,\r\n  };\r\n};\r\nexport const startAddUsers = (name, email, password, redirect) => {\r\n  return (dispatch) => {\r\n    saveUsers(name, email, password).then((users) => {\r\n      dispatch(pushUser({ name, email, password }));\r\n      redirect();\r\n    });\r\n  };\r\n};\r\n","import React, { lazy, Suspense } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nconst Home = lazy(() => import(\"./components/Home/CoronaCasesTable\"));\nconst Weather = lazy(() => import(\"./components/Weather/Weather\"));\nconst SignUp = lazy(() => import(\"./components/SignUp/SignUp\"));\nconst SignIn = lazy(() => import(\"./components/SignIn/SignIn\"));\n\nfunction App() {\n  return (\n    <>\n      <Suspense\n        fallback={\n          <div className=\"spinner-border text-primary\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        }\n      >\n        <Router>\n          <Switch>\n            <Route component={SignIn} path=\"/signin\" exact />\n            <Route component={Home} path=\"/home\" exact />\n            <Route component={Weather} path=\"/weather/state/:name\" exact />\n            <Route component={SignUp} path=\"/\" />\n          </Switch>\n        </Router>\n      </Suspense>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = [];\r\n\r\nexport default function userReducer(state = initState, action) {\r\n  switch (action.type) {\r\n    case \"SET_USER\":\r\n      return [...action.payload];\r\n    case \"PUSH_USER\":\r\n      return [...state, action.payload];\r\n    default:\r\n      return initState;\r\n  }\r\n}\r\n","import csvData from \"./data/state_wise_data.json\";\r\nconst initState = csvData;\r\nexport default function coronaCasesReducer(state = initState, action) {\r\n  switch (action.type) {\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","const initState = [];\r\n\r\nexport default function userReducer(state = initState, action) {\r\n  switch (action.type) {\r\n    case \"SET_WEATHER\":\r\n      return action.payload;\r\n    case \"GET_WEATHER\":\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import statesData from \"./data/statesLocation.json\";\r\n\r\nconst initState = statesData;\r\n\r\nexport default function userReducer(state = initState, action) {\r\n  switch (action.type) {\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport usersReducer from \"../reducers/usersReducer\";\r\nimport coronaCasesReducer from \"../reducers/coronaCasesReducer\";\r\nimport weatherDataReducer from \"../reducers/weatherDataReducer\";\r\nimport statesReducer from \"../reducers/statesReducer\";\r\nconst configStore = () => {\r\n  const store = createStore(\r\n    combineReducers({\r\n      users: usersReducer,\r\n      coronaCases: coronaCasesReducer,\r\n      weather: weatherDataReducer,\r\n      states: statesReducer,\r\n    }),\r\n    applyMiddleware(thunk)\r\n  );\r\n\r\n  return store;\r\n};\r\n\r\nexport default configStore;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configStore from \"./store/configStore\";\nimport { Provider } from \"react-redux\";\nimport { startgetUsers } from \"./action/userAction\";\nimport { startWeatherData } from \"./action/weatherDataAction\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nconst store = configStore();\n\nstore.subscribe(() => {\n  console.log(store.getState());\n});\n\nif (store.getState().users.length === 0) {\n  store.dispatch(startgetUsers());\n  store.dispatch(startWeatherData());\n}\n\nconsole.log(store.getState());\nconst jsx = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\nReactDOM.render(jsx, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}