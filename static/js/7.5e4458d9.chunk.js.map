{"version":3,"sources":["components/NavBar/NavBar.js","components/styledComponents/WeatherTitle.js","components/Weather/Weather.js"],"names":["connect","state","states","props","React","useState","isOpen","setisOpen","color","dark","expand","className","onClick","id","navbar","left","to","localStorage","setItem","right","style","marginRight","caret","map","data","key","lat","long","lon","console","log","dispatch","startfetchWeather","WeatherTitle","styled","h1","fontSize","weather","marginLeft","Date","getMonth","getDate","match","params","name","undefined","currently","temperature","apparentTemperature","marginTop","dewPoint","windSpeed","humidity","toFixed","uvIndex"],"mappings":"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","file":"static/js/7.5e4458d9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  MDBNavbar,\r\n  MDBNavbarBrand,\r\n  MDBNavbarNav,\r\n  MDBNavItem,\r\n  MDBNavLink,\r\n  MDBNavbarToggler,\r\n  MDBCollapse,\r\n  MDBDropdown,\r\n  MDBDropdownToggle,\r\n  MDBDropdownMenu,\r\n  MDBDropdownItem,\r\n} from \"mdbreact\";\r\nimport { connect } from \"react-redux\";\r\nimport { startfetchWeather } from \"../../action/weatherDataAction\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction NavbarPage(props) {\r\n  const [isOpen, setisOpen] = React.useState(false);\r\n\r\n  const handleWeatherFetch = (lat, long) => {\r\n    console.log(lat, long, \"data\");\r\n    props.dispatch(startfetchWeather(lat, long));\r\n  };\r\n\r\n  const toggleCollapse = () => {\r\n    setisOpen(!isOpen);\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.setItem(\"weatherapp_log\", \"false\");\r\n  };\r\n\r\n  return (\r\n    <MDBNavbar color=\"purple\" dark expand=\"md\">\r\n      <MDBNavbarBrand>\r\n        <strong className=\"white-text\">Weather & Corona </strong>\r\n      </MDBNavbarBrand>\r\n      <MDBNavbarToggler onClick={toggleCollapse} />\r\n      <MDBCollapse id=\"navbarCollapse3\" isOpen={isOpen} navbar>\r\n        <MDBNavbarNav left>\r\n          <MDBNavItem>\r\n            <MDBNavLink to=\"/home\">Home</MDBNavLink>\r\n          </MDBNavItem>\r\n          <MDBNavItem>\r\n            <MDBNavLink to=\"/weather/banglore\">Weather</MDBNavLink>\r\n          </MDBNavItem>\r\n          <MDBNavItem>\r\n            <MDBNavLink to=\"/signup\" onClick={handleLogout}>\r\n              Logout\r\n            </MDBNavLink>\r\n          </MDBNavItem>\r\n        </MDBNavbarNav>\r\n        <MDBNavbarNav right style={{ marginRight: 50 }}>\r\n          <MDBNavItem>\r\n            <MDBDropdown>\r\n              <MDBDropdownToggle caret color=\"yellow\">\r\n                Banglore\r\n              </MDBDropdownToggle>\r\n              <MDBDropdownMenu className=\"dropdown-default\">\r\n                {props.states.map((data) => {\r\n                  return (\r\n                    <MDBDropdownItem\r\n                      key={data.state}\r\n                      onClick={() => handleWeatherFetch(data.lat, data.lon)}\r\n                    >\r\n                      <Link to={`/weather/${data.state}`}>{data.state}</Link>\r\n                    </MDBDropdownItem>\r\n                  );\r\n                })}\r\n              </MDBDropdownMenu>\r\n            </MDBDropdown>\r\n          </MDBNavItem>\r\n        </MDBNavbarNav>\r\n      </MDBCollapse>\r\n    </MDBNavbar>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    states: state.states,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(NavbarPage);\r\n","import styled from \"styled-components\";\r\nconst WeatherTitle = styled.h1`\r\n  color: #000;\r\n  font-family: Montserrat;\r\n  font-style: normal;\r\n  font-size: ${(props) => props.fontSize}px;\r\n  font-weight: bold;\r\n  letter-spacing: -1px;\r\n  line-height: 1;\r\n  text-align: left;\r\n`;\r\n\r\nexport default WeatherTitle;\r\n","import React from \"react\";\r\nimport WeatherTitle from \"../styledComponents/WeatherTitle\";\r\nimport NavbarPage from \"../NavBar/NavBar\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction Weather(props) {\r\n  const month = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  return (\r\n    <div>\r\n      <NavbarPage />\r\n      <div className=\"bg\">\r\n        <div className=\"container\" style={{ marginLeft: 105 }}>\r\n          <div className=\"row\">\r\n            <div className=\"col-xl-6\">\r\n              <WeatherTitle fontSize=\"20\" style={{ color: \"white\" }}>\r\n                {month[new Date().getMonth()]} {new Date().getDate()}\r\n              </WeatherTitle>\r\n              <WeatherTitle fontSize=\"50\" style={{ color: \"white\" }}>\r\n                {props.match.params.name}\r\n              </WeatherTitle>\r\n            </div>\r\n            <div className=\"col-xl-6\">\r\n              <i\r\n                className=\"fas fa-arrow-right fa-3x\"\r\n                style={{ color: \"white\" }}\r\n              ></i>\r\n            </div>\r\n          </div>\r\n          {props.weather.currently !== undefined && (\r\n            <div className=\"weathercontainer\">\r\n              <div className=\"row\" style={{ marginLeft: 10 }}>\r\n                <div className=\"col-xl-4\">\r\n                  <br />\r\n                  <br />\r\n                  <WeatherTitle fontSize=\"50\">\r\n                    {props.weather.currently.temperature}°F\r\n                  </WeatherTitle>\r\n                  <br />\r\n                  <WeatherTitle fontSize=\"15\">\r\n                    {props.weather.currently.temperature}°F Feels like{\" \"}\r\n                    {props.weather.currently.apparentTemperature}°F\r\n                  </WeatherTitle>\r\n                </div>\r\n                <div className=\"col-xl-2\" style={{ marginTop: 70 }}>\r\n                  <WeatherTitle fontSize=\"15\">Rain</WeatherTitle>\r\n                  <i className=\"fa fa-cloud\" style={{ color: \"black\" }}></i>\r\n                  <WeatherTitle fontSize=\"20\">\r\n                    {props.weather.currently.dewPoint}%\r\n                  </WeatherTitle>\r\n                </div>\r\n                <div className=\"col-xl-2\" style={{ marginTop: 70 }}>\r\n                  <WeatherTitle fontSize=\"15\">Wind</WeatherTitle>\r\n                  <i className=\"fas fa-wind\" style={{ color: \"black\" }}></i>\r\n                  <WeatherTitle fontSize=\"20\">\r\n                    {props.weather.currently.windSpeed} km/hr\r\n                  </WeatherTitle>\r\n                </div>\r\n                <div className=\"col-xl-2\" style={{ marginTop: 70 }}>\r\n                  <WeatherTitle fontSize=\"15\">Humidity</WeatherTitle>\r\n                  <i\r\n                    className=\"fas fa-hand-holding-water\"\r\n                    style={{ color: \"black\" }}\r\n                  ></i>\r\n                  <WeatherTitle fontSize=\"20\">\r\n                    {(props.weather.currently.humidity * 100).toFixed(2)}%\r\n                  </WeatherTitle>\r\n                </div>\r\n                <div className=\"col-xl-2\" style={{ marginTop: 70 }}>\r\n                  <WeatherTitle fontSize=\"15\">UV Index</WeatherTitle>\r\n                  <i className=\"fas fa-sun\" style={{ color: \"black\" }}></i>\r\n                  <WeatherTitle fontSize=\"20\">\r\n                    {props.weather.currently.uvIndex} out of 10\r\n                  </WeatherTitle>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    weather: state.weather,\r\n  };\r\n};\r\nexport default connect(mapStateToProps)(Weather);\r\n"],"sourceRoot":""}